# Caricamento delle librerie necessarie
library(ecospat)
library(raster)
library(sf)
library(dplyr)
library(stringr)

# Funzione per calcolare gli indici D e I utilizzando ecospat
calc_indices_alternative <- function(biased_scores, unbiased_scores, mydata_sicilia) {
  # Creare una griglia ecospat per calcolare l'overlap
  biased_grid <- raster::rasterize(biased_scores, mydata_sicilia)
  unbiased_grid <- raster::rasterize(unbiased_scores, mydata_sicilia)
  
  # Calcolare la sovrapposizione usando ecospat
  overlap <- ecospat.niche.overlap(biased_grid, unbiased_grid, cor = TRUE)
  
  # Estrazione dei risultati dell'overlap (D e I)
  D <- overlap$D  # Sovrapposizione basata sulla distanza
  I <- overlap$I  # Sovrapposizione basata sulla correlazione
  
  return(list(D = D, I = I))
}

# Funzione per calcolare gli indici con accumulazione, senza vincolo di 5 punti
calc_accumulation_indices <- function(data_biased, data_unbiased, mydata_sicilia) {
  # Estrarre variabili climatiche
  biased_env <- raster::extract(mydata_sicilia, data_biased) %>% na.omit()
  unbiased_env <- raster::extract(mydata_sicilia, data_unbiased) %>% na.omit()
  
  # PCA per riduzione dimensionale
  all_env <- rbind(biased_env, unbiased_env)
  pca_clim <- dudi.pca(as.data.frame(all_env), center = TRUE, scale = TRUE, scannf = FALSE, nf = 2)
  
  biased_scores <- suprow(pca_clim, biased_env)$li
  unbiased_scores <- suprow(pca_clim, unbiased_env)$li
  
  # Calcolo degli indici con accumulazione
  max_occurrences <- min(nrow(biased_scores), nrow(unbiased_scores))
  results <- data.frame(
    NUM_OCCURRENCES = integer(),
    D = numeric(),
    I = numeric()
  )
  
  for (i in 1:max_occurrences) {
    biased_subset <- biased_scores[1:i, ]
    unbiased_subset <- unbiased_scores[1:i, ]
    
    # Metodo alternativo per calcolare D e I con ecospat
    indices <- calc_indices_alternative(biased_subset, unbiased_subset, mydata_sicilia)
    D <- indices$D
    I <- indices$I
    
    results <- rbind(results, data.frame(NUM_OCCURRENCES = i, D = D, I = I))
  }
  
  return(results)
}

# Funzione per estrarre informazioni dal nome del file
extract_file_info <- function(file_name) {
  match <- str_match(
    file_name,
    "species_(\\d+)_sp_prevalence_(\\d+\\.\\d+)_sample_prev_(\\d+\\.\\d+)_n_occ_(\\d+)"
  )
  
  if (is.na(match[1, 1])) {
    stop("Nome del file non corrisponde al formato atteso!")
  }
  
  return(list(
    SPECIES_NUMBER = as.integer(match[1, 2]),
    SPECIES_PREVALENCE = as.numeric(match[1, 3]),
    SAMPLE_PREVALENCE = as.numeric(match[1, 4]),
    N_OCCURRENCES = as.integer(match[1, 5])
  ))
}

# Funzione principale per elaborare la specie
process_species <- function(species_file, mydata_sicilia, output_dir) {
  # Estrai informazioni dal nome del file
  file_info <- extract_file_info(basename(species_file))
  
  # Caricamento dei dati della specie
  species_data <- read.csv(species_file)
  
  # Separazione biased e unbiased
  data_biased <- subset(species_data, distance == 0)
  data_unbiased <- subset(species_data, distance > 0)
  
  # Conversione in oggetti spaziali
  coordinates(data_biased) <- c("X", "Y")
  proj4string(data_biased) <- CRS("+proj=longlat +datum=WGS84")
  
  coordinates(data_unbiased) <- c("X", "Y")
  proj4string(data_unbiased) <- CRS("+proj=longlat +datum=WGS84")
  
  # Calcolo degli indici
  results <- calc_accumulation_indices(data_biased, data_unbiased, mydata_sicilia)
  
  # Aggiungi informazioni iniziali ai risultati
  results <- results %>%
    mutate(
      SPECIES_NUMBER = file_info$SPECIES_NUMBER,
      SPECIES_PREVALENCE = file_info$SPECIES_PREVALENCE,
      SAMPLE_PREVALENCE = file_info$SAMPLE_PREVALENCE,
      N_OCCURRENCES_INITIAL = file_info$N_OCCURRENCES
    )
  
  # Salvataggio dei risultati
  species_name <- tools::file_path_sans_ext(basename(species_file))
  output_file <- file.path(output_dir, paste0(
    species_name, "_sp", file_info$SPECIES_NUMBER, 
    "_prev", file_info$SPECIES_PREVALENCE, "_results.csv"
  ))
  write.csv(results, file = output_file, row.names = FALSE)
}

# Imposta i percorsi
setwd("C:/tesi/Specie virtuali/Specie virtualia sicilia")

# Caricamento delle variabili climatiche e shapefile
aoi_sicilia <- st_read("sicilia.shp") %>% .$geometry
tmin <- worldclim_country("Ita", "tmin", path = tempdir(), res = 0.5, version = "2.1")$ITA_wc2.1_30s_tmin_1
tmax <- worldclim_country("Ita", "tmax", path = tempdir(), res = 0.5, version = "2.1")$ITA_wc2.1_30s_tmax_1
prec <- worldclim_country("Ita", "prec", path = tempdir(), res = 0.5, version = "2.1")$ITA_wc2.1_30s_prec_1

r_list <- c(tmin, tmax, prec)
mydata <- raster::stack(r_list)
aoi_sp <- sf::as_Spatial(aoi_sicilia)
mydata_sicilia <- mydata %>% crop(., aoi_sp) %>% mask(., aoi_sp)

names(mydata_sicilia) <- c("Temperature Minimum", "Temperature Maximum", "Precipitation")


# Percorso del file e directory di output
species_file <- "species_1_sp_prevalence_0.1_sample_prev_0.9_n_occ_600.csv"
output_dir <- "C:/tesi/Specie virtuali/Specie virtualia sicilia/results"

# Creazione della directory di output se non esiste
if (!dir.exists(output_dir)) {
  dir.create(output_dir)
}

# Elaborazione della specie specifica
process_species(species_file, mydata_sicilia, output_dir)



# Caricamento delle librerie necessarie
library(ecospat)
library(raster)
library(terra)
library(sp)
library(viridis)
library(sf)
library(markdown)
library(rmarkdown)
library(dplyr)
library(stringr)

# Imposta la directory di lavoro
setwd("C:/tesi")

# Caricamento shapefile della Sicilia
aoi_sicilia <- st_read("sicilia.shp") %>% .$geometry

# Bounding box per delimitare l'area di studio
sicilia_bb <- st_bbox(aoi_sicilia)

# Variabili bioclimatiche dal WorldClim
tmin <- worldclim_country("Ita", "tmin", path = tempdir(), res = 0.5, version = "2.1")
tmax <- worldclim_country("Ita", "tmax", path = tempdir(), res = 0.5, version = "2.1")
prec <- worldclim_country("Ita", "prec", path = tempdir(), res = 0.5, version = "2.1")

# Selezione del primo mese
tmin <- tmin$ITA_wc2.1_30s_tmin_1
tmax <- tmax$ITA_wc2.1_30s_tmax_1
prec <- prec$ITA_wc2.1_30s_prec_1

# Creazione di uno stack raster
r_list <- c(tmin, tmax, prec)
mydata <- raster::stack(r_list)

# Plot per visualizzare le variabili climatiche
plot(mydata)

# Crop e mask dei raster per l'area della Sicilia
aoi_sp <- sf::as_Spatial(aoi_sicilia)
mydata_sicilia <- mydata %>% crop(., aoi_sp) %>% mask(., aoi_sp)

# Rinomina i layer nel raster stack
names(mydata_sicilia) <- c("Temperature Minimum", "Temperature Maximum", "Precipitation")

# Visualizzazione dei variabili climatiche
plot(mydata_sicilia$`Temperature.Minimum`, main = "Temperature Minimum", col = viridis::viridis(100))
plot(mydata_sicilia$`Temperature.Maximum`, main = "Temperature Maximum", col = viridis::viridis(100))
plot(mydata_sicilia$Precipitation, main = "Precipitation", col = viridis::viridis(100))

# Caricamento del dataset delle occorrenze
species_file <- "species_1_sp_prevalence_0.1_sample_prev_0.9_n_occ_600.csv"
data_specie1 <- read.csv(species_file)

# Separazione delle occorrenze biased e unbiased
data_biased <- subset(data_specie1, distance == 0)
data_unbiased <- subset(data_specie1, distance > 0)

# Conversione delle occorrenze in oggetti spaziali
coordinates(data_biased) <- c("X", "Y")
proj4string(data_biased) <- CRS("+proj=longlat +datum=WGS84")

coordinates(data_unbiased) <- c("X", "Y")
proj4string(data_unbiased) <- CRS("+proj=longlat +datum=WGS84")

# Visualizzazione delle occorrenze biased e unbiased sulla mappa della Sicilia
par(mfrow = c(1, 2))
plot(aoi_sicilia, main = "Occorrenze Biased", border = "black", xlab = "", ylab = "", xaxt = "n", yaxt = "n")
axis(1)
axis(2)
points(data_biased, col = "red", pch = 16, cex = 0.5)
box()

plot(aoi_sicilia, main = "Occorrenze Unbiased", border = "black", xlab = "", ylab = "", xaxt = "n", yaxt = "n")
axis(1)
axis(2)
points(data_unbiased, col = "blue", pch = 16, cex = 0.5)
box()

# Estrazione dei valori climatici per le occorrenze
biased_env <- raster::extract(mydata_sicilia, data_biased)
unbiased_env <- raster::extract(mydata_sicilia, data_unbiased)

# Rimuovere valori NA
biased_env <- biased_env[complete.cases(biased_env), ]
unbiased_env <- unbiased_env[complete.cases(unbiased_env), ]

# PCA per la riduzione dimensionale
all_env <- rbind(biased_env, unbiased_env)
pca_clim <- dudi.pca(as.data.frame(all_env), center = TRUE, scale = TRUE, scannf = FALSE, nf = 2)

# Calcolo dei punteggi PCA
global_scores <- pca_clim$li
biased_scores <- suprow(pca_clim, biased_env)$li
unbiased_scores <- suprow(pca_clim, unbiased_env)$li

# Calcolo delle griglie climatiche dinamiche
biased_grid <- ecospat.grid.clim.dyn(global_scores, biased_scores, biased_scores)
unbiased_grid <- ecospat.grid.clim.dyn(global_scores, unbiased_scores, unbiased_scores)

# Plot del niche overlap
ecospat.plot.niche.dyn(biased_grid, unbiased_grid, quant = 0.1, interest = 2, 
                       title = "Niche Overlap", name.axis1 = "PC1", name.axis2 = "PC2")

ecospat.plot.contrib(contrib = pca_clim$co, eigen = pca_clim$eig)

# Calcolo dell'indice dinamico per il confronto tra biased e unbiased
dynamic_index_biased_unbiased <- ecospat.niche.dyn.index(biased_grid, unbiased_grid, intersection = 0.1)$dynamic.index.w

# Visualizzazione del risultato
print(dynamic_index_biased_unbiased)

# Creazione della directory di output
output_dir <- "C:/tesi/Specie virtuali/Specie virtualia sicilia/results"
if (!dir.exists(output_dir)) {
  dir.create(output_dir)
}

# Funzione per calcolare gli indici D e I utilizzando ecospat
calc_indices_alternative <- function(biased_scores, unbiased_scores, mydata_sicilia) {
  # Creare una griglia ecospat per calcolare l'overlap
  biased_grid <- raster::rasterize(biased_scores, mydata_sicilia)
  unbiased_grid <- raster::rasterize(unbiased_scores, mydata_sicilia)
  
  # Calcolare la sovrapposizione usando ecospat
  overlap <- ecospat.niche.overlap(biased_grid, unbiased_grid, cor = TRUE)
  
  # Estrazione dei risultati dell'overlap (D e I)
  D <- overlap$D  # Sovrapposizione basata sulla distanza
  I <- overlap$I  # Sovrapposizione basata sulla correlazione
  
  return(list(D = D, I = I))
}

# Funzione per calcolare gli indici con accumulazione
calc_accumulation_indices <- function(data_biased, data_unbiased, mydata_sicilia) {
  # Estrarre variabili climatiche
  biased_env <- raster::extract(mydata_sicilia, data_biased) %>% na.omit()
  unbiased_env <- raster::extract(mydata_sicilia, data_unbiased) %>% na.omit()
  
  # PCA per riduzione dimensionale
  all_env <- rbind(biased_env, unbiased_env)
  pca_clim <- dudi.pca(as.data.frame(all_env), center = TRUE, scale = TRUE, scannf = FALSE, nf = 2)
  
  biased_scores <- suprow(pca_clim, biased_env)$li
  unbiased_scores <- suprow(pca_clim, unbiased_env)$li
  
  # Calcolo degli indici con accumulazione
  max_occurrences <- min(nrow(biased_scores), nrow(unbiased_scores))
  results <- data.frame(
    NUM_OCCURRENCES = integer(),
    D = numeric(),
    I = numeric()
  )
  
  for (i in 1:max_occurrences) {
    biased_subset <- biased_scores[1:i, ]
    unbiased_subset <- unbiased_scores[1:i, ]
    
    # Metodo alternativo per calcolare D e I con ecospat
    indices <- calc_indices_alternative(biased_subset, unbiased_subset, mydata_sicilia)
    D <- indices$D
    I <- indices$I
    
    results <- rbind(results, data.frame(NUM_OCCURRENCES = i, D = D, I = I))
  }
  
  return(results)
}

# Funzione per estrarre informazioni dal nome del file
extract_file_info <- function(file_name) {
  match <- str_match(
    file_name,
    "species_(\\d+)_sp_prevalence_(\\d+\\.\\d+)_sample_prev_(\\d+\\.\\d+)_n_occ_(\\d+)"
  )
  
  if (is.na(match[1, 1])) {
    stop("Nome del file non corrisponde al formato atteso!")
  }
  
  return(list(
    SPECIES_NUMBER = as.integer(match[1, 2]),
    SPECIES_PREVALENCE = as.numeric(match[1, 3]),
    SAMPLE_PREVALENCE = as.numeric(match[1, 4]),
    NUM_OCCURRENCES = as.integer(match[1, 5])
  ))
}

# Esegui l'analisi per la specie 1
info_specie1 <- extract_file_info(species_file)

# Step 1: Check the raster layer names
print(names(mydata_sicilia))

# Step 2: Ensure proper extraction of values
# Convert biased and unbiased occurrences to SpatialPoints (if not already done)
coordinates(data_biased) <- c("X", "Y")
proj4string(data_biased) <- CRS("+proj=longlat +datum=WGS84")

coordinates(data_unbiased) <- c("X", "Y")
proj4string(data_unbiased) <- CRS("+proj=longlat +datum=WGS84")

# Step 3: Extract values for biased and unbiased occurrences
biased_env <- raster::extract(mydata_sicilia, data_biased)
unbiased_env <- raster::extract(mydata_sicilia, data_unbiased)

# Step 4: Check for any NA values in the extraction results
print(sum(is.na(biased_env)))
print(sum(is.na(unbiased_env)))

# Remove rows with NA values if any
biased_env <- biased_env[complete.cases(biased_env), ]
unbiased_env <- unbiased_env[complete.cases(unbiased_env), ]


# Calcolo degli indici dinamici
accumulated_indices <- calc_accumulation_indices(data_biased, data_unbiased, mydata_sicilia)

# Salvataggio dei risultati
write.csv(accumulated_indices, file.path(output_dir, "accumulated_indices.csv"), row.names = FALSE)
