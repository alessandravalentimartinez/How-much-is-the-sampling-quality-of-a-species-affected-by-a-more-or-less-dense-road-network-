
library(ecospat)
library(raster)
library(rgbif)
library(maptools)
library(devtools)
library(terra)
library(ade4)
library(ape)
library(biomod2)
library(rworldmap)

library(sp)


``




# Global occurrence of European rabbit
ocGBIF <- occ_search(scientificName = "Oryctolagus cuniculus", 
                     hasCoordinate = TRUE,
                     basisOfRecord = "Preserved_Specimen",
                     limit = 10000,
                     fields = c("decimalLatitude",
                                "decimalLongitude", 
                                "year",
                                "country", 
                                "countryCode"))


ocOccs <- ocGBIF$data


coordinates(ocOccs) <- c("decimalLongitude",
                         "decimalLatitude")



# Download global bioclim data for the bio variables (temperature and precipitation) with 10-minute resolution
wclim <- worldclim_global(var = "bio", res = 10, version = "2.1", path = tempdir())

# Plot the bio1 variable (Mean Annual Temperature)
par(mar = c(0, 0, 3, 1))  # Set plot margins
plot(wclim$wc2.1_10m_bio_1, main = "Mean Annual Temperature [Â°C] (BIO1)")

################################################

# Assuming `ocOccs` is a SpatialPointsDataFrame, convert it to SpatVector
ocOccs_spat <- vect(ocOccs)

# Now use terra::extract with the SpatRaster and SpatVector
ocOccs <- cbind(ocOccs, terra::extract(wclim, ocOccs_spat))
ocOccs <- ocOccs[complete.cases(data.frame(ocOccs)), ]

eurExt <- extent(c(-20,35,30,90))
ocEUR <- crop(ocOccs, eurExt)

ausExt <- extent(c(100,160,-45,-10))
ocAUS <- crop(ocOccs, ausExt)

# Load and plot the coarse resolution world map
data(countriesCoarse)

par(mar = c(1, 0, 0, 0))
plot(countriesCoarse, border = "gray80")
points(ocEUR, pch = 16, col = 2, cex = 0.3)
points(ocAUS, pch = 16, col = 4, cex = 0.3, add=T)


########### PRE MODELING 

# crop the environmental data to the native and invasive geographical ranges
eurEnvR <- crop(wclim, eurExt)
ausEnvR <- crop(wclim, ausExt)


# Assuming is a SpatRaster object
ausEnvM <- values(ausEnvR)
eurEnvM <- values(eurEnvR)

# remove missing values
eurEnvM <- eurEnvM[complete.cases(eurEnvM), ]
ausEnvM <- ausEnvM[complete.cases(ausEnvM), ]

# produce global environmental background data
globalEnvM <- rbind(eurEnvM, ausEnvM)


