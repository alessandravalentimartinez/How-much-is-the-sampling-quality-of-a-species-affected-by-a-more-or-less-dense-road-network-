
library(ecospat)
library(raster)
library(rgbif)
library(maptools)
library(devtools)
library(terra)
library(ade4)
library(ape)
library(biomod2)
library(rworldmap)

library(sp)


``




# Global occurrence of European rabbit
ocGBIF <- occ_search(scientificName = "Oryctolagus cuniculus", 
                     hasCoordinate = TRUE,
                     basisOfRecord = "Preserved_Specimen",
                     limit = 10000,
                     fields = c("decimalLatitude",
                                "decimalLongitude", 
                                "year",
                                "country", 
                                "countryCode"))


ocOccs <- ocGBIF$data


coordinates(ocOccs) <- c("decimalLongitude",
                         "decimalLatitude")



# Download global bioclim data for the bio variables (temperature and precipitation) with 10-minute resolution
wclim <- worldclim_global(var = "bio", res = 10, version = "2.1", path = tempdir())

# Plot the bio1 variable (Mean Annual Temperature)
par(mar = c(0, 0, 3, 1))  # Set plot margins
plot(wclim$wc2.1_10m_bio_1, main = "Mean Annual Temperature [Â°C] (BIO1)")

################################################

# Assuming `ocOccs` is a SpatialPointsDataFrame, convert it to SpatVector
ocOccs_spat <- vect(ocOccs)

# Now use terra::extract with the SpatRaster and SpatVector
ocOccs <- cbind(ocOccs, terra::extract(wclim, ocOccs_spat))
ocOccs <- ocOccs[complete.cases(data.frame(ocOccs)), ]

eurExt <- extent(c(-20,35,30,90))
ocEUR <- crop(ocOccs, eurExt)

ausExt <- extent(c(100,160,-45,-10))
ocAUS <- crop(ocOccs, ausExt)

# Load and plot the coarse resolution world map
data(countriesCoarse)

par(mar = c(1, 0, 0, 0))
plot(countriesCoarse, border = "gray80")
points(ocEUR, pch = 16, col = 2, cex = 0.3)
points(ocAUS, pch = 16, col = 4, cex = 0.3, add=T)


########### PRE MODELING 

# crop the environmental data to the native and invasive geographical ranges
eurEnvR <- crop(wclim, eurExt)
ausEnvR <- crop(wclim, ausExt)


# Assuming is a SpatRaster object
ausEnvM <- values(ausEnvR)
eurEnvM <- values(eurEnvR)

# remove missing values
eurEnvM <- eurEnvM[complete.cases(eurEnvM), ]
ausEnvM <- ausEnvM[complete.cases(ausEnvM), ]

# produce global environmental background data
globalEnvM <- rbind(eurEnvM, ausEnvM)





####################### pre stat

# rename

worldclim2.1_variables <- c(
  "ann.mean.temp", 
  "diurnal.temp.range.mean",
  "isothermality",
  "temp.seasonality",
  "max.temp.warmest_month",
  "min.temp.coldest_month",
  "ann.temp.range",
  "mean.temp.wettest_quarter",
  "mean.temp.driest_quarter",
  "mean.temp.warmest_quarter",
  "mean.temp.coldest_quarter",
  "ann.precip",
  "precip.wettest_month",
  "precip.driest_month",
  "precip.seasonality",
  "precip.wettest_quarter",
  "precip.driest_quarter",
  "precip.warmest_quarter",
  "precip.coldest_quarter",
  "x",
  "y"
)

ocEUR.df <- as.data.frame(ocEUR)
ocAUS.df <- as.data.frame(ocAUS)
ocEUR.df <- ocEUR.df[, 4:24]
ocAUS.df <- ocAUS.df[, 4:24]
colnames(ocEUR.df) <- worldclim2.1_variables
colnames(ocAUS.df) <- worldclim2.1_variables


# recalculate 

for (col in 1:ncol(ocEUR.df)) {
  # Check if column name contains "temp"
  if (grepl("temp", colnames(ocEUR.df)[col])) {
    # Divide column values by 10
    ocEUR.df[, col] <- ocEUR.df[, col] / 10
  }
}

for (col in 1:ncol(ocAUS.df)) {
  # Check if column name contains "temp"
  if (grepl("temp", colnames(ocAUS.df)[col])) {
    # Divide column values by 10
    ocAUS.df[, col] <- ocAUS.df[, col] / 10
  }
}




############# In una fase successiva, 
#vogliamo calcolare le statistiche di base per ciascuna delle variabili climatiche 
#sia per l'areale nativo che per quello invasivo.


occEURstats <- apply(ocEUR.df, 2, function(x) c(min = min(x), median = median(x), mean = mean(x), max = max(x), sd = sd(x)))
occAUSstats <- apply(ocAUS.df, 2, function(x) c(min = min(x), median = median(x), mean = mean(x), max = max(x), sd = sd(x)))

# combine both statistics for direct comparison
bioStats <- rbind(occEURstats, occAUSstats)
head(bioStats[, c(1, 7, 12)], 10)


##############################
# native range

ecospat.mantel.correlogram(dfvar=ocEUR.df[c(1:21)],colxy=20:21, n=100, colvar=1:19, 
                           max=10, nclass=10, nperm=100)

# invasive range

ecospat.mantel.correlogram(dfvar=ocAUS.df[c(1:21)],colxy=20:21, n=100, colvar=1:19, 
                           max=10, nclass=10, nperm=100)



######## CORE MODELING



pca.clim <- dudi.pca(globalEnvM, center = TRUE,
                     scale = TRUE, scannf = FALSE, nf = 2)

global.scores <- pca.clim$li

nativeLS.scores <-
  suprow(pca.clim,
         data.frame(ocEUR)[, colnames(globalEnvM)])$li   
invasiveLS.scores <-
  suprow(pca.clim,
         data.frame(ocAUS)[, colnames(globalEnvM)])$li

nativeEnv.scores <- suprow(pca.clim, eurEnvM)$li
invasiveEnv.scores <- suprow(pca.clim, ausEnvM)$li



######### NICHE OVERLAP


data.frame(ocEUR)[, colnames(globalEnvM)]
# calculate the Occurrence Density Grid for both native and invasive species
nativeGrid <- ecospat.grid.clim.dyn(global.scores,
                                    nativeEnv.scores,
                                    nativeLS.scores)

invasiveGrid <- ecospat.grid.clim.dyn(global.scores,
                                      invasiveEnv.scores, 
                                      invasiveLS.scores)

ecospat.plot.niche.dyn(nativeGrid, invasiveGrid, quant = 0.1, interest = 2, title = "Niche Overlap", name.axis1 = "PC1", name.axis2 = "PC2")





# plot variable contributions

ecospat.plot.contrib(contrib=pca.clim$co, eigen=pca.clim$eig)



#################


ocAUSearly <- subset(ocAUS, year <= 1950)
ocAUSlate <- subset(ocAUS, year > 1950)

geoGrid <- expand.grid(longitude =
                         seq(100, 160, length.out = 250),
                       latitude =
                         seq(-45, -10, length.out = 250))

mask <- subset(countriesCoarse, NAME == "Australia")


# Convert SpatialPolygonsDataFrame to SpatVector
mask_spat <- vect(mask)

# Apply the mask with the correct SpatRaster and SpatVector objects
earlyGeoGrid <- ecospat.grid.clim.dyn(geoGrid, geoGrid,
                                      coordinates(ocAUSearly),
                                      geomask = mask_spat)


lateGeoGrid <- ecospat.grid.clim.dyn(geoGrid, geoGrid,
                                     coordinates(ocAUSlate),
                                     geomask = mask_spat)

ecospat.plot.niche.dyn(earlyGeoGrid, lateGeoGrid, quant = 0)
plot(countriesCoarse, add = TRUE)




############################### Further methods and tests

# calculate niche overlap

ecospat.niche.overlap(nativeGrid, invasiveGrid, cor=T)


eq.test <- ecospat.niche.equivalency.test(nativeGrid, invasiveGrid, rep = 100, ncores = 1)
sim.test <- ecospat.niche.similarity.test(nativeGrid, invasiveGrid, rep = 100, rand.type = 2, ncores = 1)




# plot Equivalency and Similarity Test

par(mfrow=c(1,2))
ecospat.plot.overlap.test(eq.test, "D", "Equivalency") 
ecospat.plot.overlap.test(sim.test, "D", "Similarity")









