#Evaluating the impact of sampling bias on the measurement of the ecological niche
#The aim of this thesis  is to propose a method that shows how subsampling due to roadside bias affects niche completeness.


# load packages
library(CAST)
library(caret)
library(sf)
library(ClimDatDownloadR)
library(devtools)
library(raster)
library(viridis)
library(virtualspecies)
library(ggplot2)
library(tidyverse)
library(terra)
library(ade4)
library(hypervolume)
library(gdata)
library(ggmap)
library(osmdata)
library(osmextract)

# set working directory
setwd("C:/tesi")



# ============================
# Regione Sicilia
# ============================

# upload shapefile
aoi_sicilia <- st_read("Sicilia.shp")

# bounding box 
aoi_bb_sicilia <- st_bbox(aoi_sicilia)

# from Open Street Map select type of roads: primary, secondary, tertiary (paths)
ht_secondary <- "secondary"

# download roads from OSM: our region now is Sicilia, Italy
osm_aoi_sicilia <- oe_get("Sicilia", stringsAsFactors = FALSE, quiet = TRUE)
osm_aoi_roads_sicilia <- osm_aoi_sicilia[osm_aoi_sicilia$highway %in% ht_secondary, ]
plot(osm_aoi_roads_sicilia$geometry)


##  Download bioclimatic variables from CHELSA
#The bioclimatic variables chosen are: 
#bio1, Average annual temperature
#bio7, Annual temperature range
#bio13, Annual precipitation
#bio14, July precipitation


# Set path where the TIF files are saved
tif_path <- "C:/tesi/bio/ChelsaV2.1Climatologies"

# List of raster files (matching the names for specific bioclimatic variables)
rastlist <- list.files(path = tif_path, 
                       pattern = "CHELSA_bio_(01|07|13|14)_1981-2010_V2.1", 
                       full.names = TRUE)

# Import the TIF files into a single raster stack
mydata <- stack(rastlist)

# Change data names to match the desired variable names
names(mydata) <- c("bio01", "bio07", "bio13", "bio14")

# Convert the AOI (area of interest) to a spatial object
aoi_sp <- sf::as_Spatial(aoi_sicilia)

# Crop and mask the raster stack using the Sicily AOI
mydata_sicilia <- mydata %>% crop(., aoi_sp) %>% mask(., aoi_sp)

# Backup the original raster stack for later use
mydata_sicilia_backup <- mydata_sicilia



## View bioclimatic variables
# Plot for the variable bio01 (Annual mean temperature)
plot(mydata_sicilia$bio01, main = "Bio01 - Annual Mean Temperature", col = viridis::viridis(100))

# Plot for the variable bio07 (Annual temperature range)
plot(mydata_sicilia$bio07, main = "Bio07 - Annual Temperature Range", col = viridis::viridis(100))

# Plot for the variable bio13 (Annual precipitation)
plot(mydata_sicilia$bio13, main = "Bio13 - Annual Precipitation", col = viridis::viridis(100))

# Plot for the variable bio14 (Precipitation of July)
plot(mydata_sicilia$bio14, main = "Bio14 - Precipitation of July", col = viridis::viridis(100))


## Set the output directory for saving plots (for Sicilia)
output_dir_sicilia <- "C:/tesi/plots/sicilia"

# Create the output directory if it doesn't exist
if (!dir.exists(output_dir_sicilia)) {
  dir.create(output_dir_sicilia, recursive = TRUE)
}

# Save the plot for bio01 (Annual mean temperature) in PDF
pdf(file = file.path(output_dir_sicilia, "Sic_Bio01 - Annual Mean Temperature.pdf"))
plot(mydata_sicilia$bio01, main = "Bio01 - Annual Mean Temperature", col = viridis::viridis(100))
dev.off()

# Save the plot for bio07 (Annual temperature range) in PDF
pdf(file = file.path(output_dir_sicilia, "Sic_Bio07 - Annual Temperature Range.pdf"))
plot(mydata_sicilia$bio07, main = "Bio07 - Annual Temperature Range", col = viridis::viridis(100))
dev.off()

# Save the plot for bio13 (Annual precipitation) in PDF
pdf(file = file.path(output_dir_sicilia, "Sic_Bio13 - Annual Precipitation.pdf"))
plot(mydata_sicilia$bio13, main = "Bio13 - Annual Precipitation", col = viridis::viridis(100))
dev.off()

# Save the plot for bio14 (Precipitation of July) in PDF
pdf(file = file.path(output_dir_sicilia, "Sic_Bio14 - Precipitation of July.pdf"))
plot(mydata_sicilia$bio14, main = "Bio14 - Precipitation of July", col = viridis::viridis(100))
dev.off()


# ============================
# Regione Lombardia
# ============================

# upload shapefile
aoi_lombardia <- st_read("Lombardia.shp")

# bounding box 
aoi_bb_lombardia <- st_bbox(aoi_lombardia)

# from Open Street Map select type of roads: primary, secondary, tertiary (paths)
ht_secondary <- "secondary"

# download roads from OSM: our region now is Lombardia, Italy
osm_aoi_lombardia <- oe_get("Lombardia", stringsAsFactors = FALSE, quiet = TRUE)
osm_aoi_roads_lombardia <- osm_aoi_lombardia[osm_aoi_lombardia$highway %in% ht_secondary, ]
plot(osm_aoi_roads_lombardia$geometry)


##  Download bioclimatic variables from CHELSA
#The bioclimatic variables chosen are: 
#bio1, Average annual temperature
#bio7, Annual temperature range
#bio13, Annual precipitation
#bio14, July precipitation


# Set path where the TIF files are saved
tif_path <- "C:/tesi/bio/ChelsaV2.1Climatologies"

# List of raster files (matching the names for specific bioclimatic variables)
rastlist <- list.files(path = tif_path, 
                       pattern = "CHELSA_bio_(01|07|13|14)_1981-2010_V2.1", 
                       full.names = TRUE)

# Import the TIF files into a single raster stack
mydata <- stack(rastlist)

# Change data names to match the desired variable names
names(mydata) <- c("bio01", "bio07", "bio13", "bio14")

# Convert the AOI (area of interest) to a spatial object
aoi_sp <- sf::as_Spatial(aoi_lombardia)

# Crop and mask the raster stack using the Lombardia AOI
mydata_lombardia <- mydata %>% crop(., aoi_sp) %>% mask(., aoi_sp)

# Backup the original raster stack for later use
mydata_lombardia_backup <- mydata_lombardia



## View bioclimatic variables
# Plot for the variable bio01 (Annual mean temperature)
plot(mydata_lombardia$bio01, main = "Bio01 - Annual Mean Temperature", col = viridis::viridis(100))

# Plot for the variable bio07 (Annual temperature range)
plot(mydata_lombardia$bio07, main = "Bio07 - Annual Temperature Range", col = viridis::viridis(100))

# Plot for the variable bio13 (Annual precipitation)
plot(mydata_lombardia$bio13, main = "Bio13 - Annual Precipitation", col = viridis::viridis(100))

# Plot for the variable bio14 (Precipitation of July)
plot(mydata_lombardia$bio14, main = "Bio14 - Precipitation of July", col = viridis::viridis(100))


## Set the output directory for saving plots (for Lombardia)
output_dir_lombardia <- "C:/tesi/plots/lombardia"

# Create the output directory if it doesn't exist
if (!dir.exists(output_dir_lombardia)) {
  dir.create(output_dir_lombardia, recursive = TRUE)
}

# Save the plot for bio01 (Annual mean temperature) in PDF
pdf(file = file.path(output_dir_lombardia, "Lomb_Bio01 - Annual Mean Temperature.pdf"))
plot(mydata_lombardia$bio01, main = "Bio01 - Annual Mean Temperature", col = viridis::viridis(100))
dev.off()

# Save the plot for bio07 (Annual temperature range) in PDF
pdf(file = file.path(output_dir_lombardia, "Lomb_Bio07 - Annual Temperature Range.pdf"))
plot(mydata_lombardia$bio07, main = "Bio07 - Annual Temperature Range", col = viridis::viridis(100))
dev.off()

# Save the plot for bio13 (Annual precipitation) in PDF
pdf(file = file.path(output_dir_lombardia, "Lomb_Bio13 - Annual Precipitation.pdf"))
plot(mydata_lombardia$bio13, main = "Bio13 - Annual Precipitation", col = viridis::viridis(100))
dev.off()

# Save the plot for bio14 (Precipitation of July) in PDF
pdf(file = file.path(output_dir_lombardia, "Lomb_Bio14 - Precipitation of July.pdf"))
plot(mydata_lombardia$bio14, main = "Bio14 - Precipitation of July", col = viridis::viridis(100))
dev.off()


## Random Virtual Species: run every time you want to create a virtual species.

# ============================
# Regione Sicilia
# ============================


## step 1: suitability map generation
random.sp_sicilia <- generateRandomSp(raster.stack = mydata_sicilia,
                                      convert.to.PA = FALSE,
                                      # how to combine response functions
                                      species.type = "multiplicative",
                                      # random approach between PCA and response function
                                      approach = "response",
                                      # response function
                                      relations = "gaussian",
                                      # realistic species
                                      realistic.sp = TRUE,
                                      plot = FALSE)

## step 2: Presence/Absence: requires defining the parameters alpha, beta, and species prevalence
new.pres_sicilia <-convertToPA(random.sp_sicilia,
                               beta = "random",
                               alpha = -0.05, plot = FALSE,
                               species.prevalence = 0.01)

## step 3: occurences
presence.points_sicilia <- sampleOccurrences(new.pres_sicilia,
                                             n = 200,
                                             type = "presence only",
                                             sample.prevalence = 0.9,
                                             error.probability = 0,
                                             detection.probability = 1,
                                             correct.by.suitability = TRUE,
                                             plot = FALSE)




#devo plottare

# ============================
# Regione Lombardia
# ============================

## step 1: suitability map generation
random.sp_lombardia <- generateRandomSp(raster.stack = mydata_lombardia,
                                        convert.to.PA = FALSE,
                                        # how to combine response functions
                                        species.type = "multiplicative",
                                        # random approach between PCA and response function
                                        approach = "response",
                                        # response function
                                        relations = "gaussian",
                                        # realistic species
                                        realistic.sp = TRUE,
                                        plot = FALSE)

## step 2: Presence/Absence: requires defining the parameters alpha, beta, and species prevalence
new.pres_lombardia <- convertToPA(random.sp_lombardia,
                                  beta = "random",
                                  alpha = -0.05, plot = FALSE,
                                  species.prevalence = 0.01)

## step 3: occurences
presence.points_lombardia <- sampleOccurrences(new.pres_lombardia,
                                               n = 200,
                                               type = "presence only",
                                               sample.prevalence = 0.9,
                                               error.probability = 0,
                                               detection.probability = 1,
                                               correct.by.suitability = TRUE,
                                               plot = FALSE)


## Preliminary Steps for Niche Analysis

# ============================
# Regione Sicilia
# ============================

# Z transform for hypervolume building
for (i in 1:nlayers(mydata_sicilia)){
  mydata_sicilia[[i]] <- (mydata_sicilia[[i]] - cellStats(mydata_sicilia[[i]], 'mean')) / cellStats(mydata_sicilia[[i]], 'sd') 
}

# The raster of occurrences is transformed into a dataset, from which the rows satisfying both conditions Real = 1 and Observed = 1 are preserved
raster_occurences <- presence.points_sicilia$sample.points %>% as.data.frame() %>% .[.$Real == 1 & .$Observed == 1, ]

# The environmental variables are associated with the occurrences using their coordinates
values_occ <- mydata_sicilia %>% rasterToPoints() %>% as.data.frame()
filtered_occ <- merge(values_occ, raster_occurences, by = c("x", "y"))

# Useless columns 
drops <- c("Real", "Observed", "x", "y")
occurrences_values <- filtered_occ[ , !(names(filtered_occ) %in% drops)]

## Functions for Hypervolume

# Hypervolume: just the hypervolume value from hypervolume_gaussian function
hyp_calc <- function(data) {
  hv_occ <- hypervolume_gaussian(data)
  return(hv_occ@Volume)
}

# Function to build the accumulation curve with random increment in occurrences
acc_curve <- function(x, no) {
  # Starts with a random row
  fx <- x %>% 
    sample_n(size = 1) 
  
  ipervolumi <- 0
  num_occurrences <- 0
  
  for (i in 1:1000) {
    
    # To the initial value (a row)
    # Random values are selected
    # They are bound to fx
    # Unique values are kept
    fx <- x %>% 
      sample_n(size = no) %>% 
      bind_rows(fx) %>% 
      distinct()
    
    # Hypervolume per subset
    hv <- hyp_calc(fx)
    
    # Save hypervolume & number of occurrences
    ipervolumi <- c(ipervolumi, hv)
    num_occurrences <- c(num_occurrences, nrow(fx))
    
    # Condition
    # Stop when the subset has the same number of occurrences as the original set
    if(nrow(fx) == nrow(x)) {
      break
    }
  }
  
  result <- bind_cols(iperv = ipervolumi, n_occ = num_occurrences)
  return(list(result))
}

## Roadside bias
# create raster with distances from roads
roads_vect_sicilia <- terra::vect(osm_aoi_roads_sicilia$geometry)  # Usa i dati delle strade della Sicilia

# turn into SpatRaster object
raster_roads_sicilia <- as(mydata_sicilia[[1]], "SpatRaster")

# rasterize distances
r_sicilia <- terra::rasterize(roads_vect_sicilia, raster_roads_sicilia)

# Calculate the distance in km
d_sicilia <- distance(r_sicilia, unit = "km")

# Crop the d_sicily raster using the polygon Sicily.shp
d_rast_sicilia <- crop(d_sicilia, aoi_sicilia)

# Masks the raster to obtain only the data within the polygon Sicily
d_rast_sicilia <- mask(d_rast_sicilia, aoi_sicilia)

## plot: distance from roads
# Creates a dataframe with raster values and coordinates
raster_df_dist_sicilia <- as.data.frame(d_rast_sicilia, xy = TRUE)

# Name of the column of values to be used for filling
value_column_sicilia <- names(raster_df_dist_sicilia)[3]

#create the plot
library(rlang)
ggplot() +
  # Aggiungi il raster (usando geom_tile)
  geom_tile(data = raster_df_dist_sicilia, aes(x = x, y = y, fill = !!sym(value_column_sicilia))) +
  # Usa la palette viridis per il riempimento del raster
  scale_fill_viridis_c(option = "D", alpha = 1, begin = 0, end = 1) +  # Puoi cambiare "D" con altre opzioni di viridis come "A", "B", "C", ecc.
  # Aggiungi le strade
  geom_sf(data = osm_aoi_roads_sicilia$geometry, color = "black", size = 0.5) +
  theme_bw() +
  theme_minimal() +
  labs(title = "Sampling Probability",
       fill = "Probability (km)") +
  coord_sf() +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  scale_x_continuous(labels = function(x) paste0(round(x, 1), "°E")) +  # Formatta l'asse X
  scale_y_continuous(labels = function(y) paste0(round(y, 1), "°N"))   # Formatta l'asse Y






## Extract distances
# Load the road vector and Sicily polygon
roads_vect_sicilia <- terra::vect(osm_aoi_roads_sicilia$geometry)

# Use the first layer of the input raster as the base for rasterization
raster_roads_sicilia <- as(mydata_sicilia[[1]], "SpatRaster")

# Rasterize the roads
r_sicilia <- terra::rasterize(roads_vect_sicilia, raster_roads_sicilia)

# Calculate the distance from the road raster in km
d_sicilia <- distance(r_sicilia, unit = "km")

# Crop the distance raster using the Sicily polygon
d_rast_sicilia <- terra::crop(d_sicilia, aoi_sicilia)

# Mask the raster to retain only the data within the Sicily polygon
d_rast_sicilia <- terra::mask(d_rast_sicilia, aoi_sicilia)

# Calculate the sampling probability using the "lazy sampler" function
c <- 1
sampling_prob_sicilia <- 1 - (log(c * values(d_rast_sicilia)) / log(max(c * values(d_rast_sicilia), na.rm = TRUE)))

# Replace Inf values and values greater than 1
sampling_prob_sicilia[is.infinite(sampling_prob_sicilia)] <- 1
sampling_prob_sicilia[sampling_prob_sicilia > 1] <- 1

# Associate sampling probabilities to the distance raster to obtain the probability raster
prob_raster_sicilia <- terra::classify(d_rast_sicilia, cbind(values(d_rast_sicilia), sampling_prob_sicilia))

# Convert to a dataframe for plotting
raster_df_prob_sicilia <- terra::as.data.frame(prob_raster_sicilia, xy = TRUE)

# Name of the values column to be used for filling
value_column_sicilia <- names(raster_df_prob_sicilia)[3]

# Create the sampling probability plot
ggplot() +
  # Add the raster
  geom_tile(data = raster_df_prob_sicilia, aes(x = x, y = y, fill = !!sym(value_column_sicilia))) +
  # Use the viridis color palette for the raster fill
  scale_fill_viridis_c(option = "D", alpha = 1, begin = 0, end = 1) +  
  # Add the roads
  geom_sf(data = osm_aoi_roads_sicilia$geometry, color = "black", size = 0.5) +
  theme_bw() +
  theme_minimal() +
  labs(title = "Sampling Probability",
       fill = "Probability") +
  coord_sf() +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  scale_x_continuous(labels = function(x) paste0(round(x, 1), "°E")) +  # Format the X axis
  scale_y_continuous(labels = function(y) paste0(round(y, 1), "°N"))   # Format the Y axis


# ============================
# Occurrences as Points in Sicily
# ============================

# Convert occurrence points in Sicily into a spatial vector with coordinates and set CRS
coord_occ_sicilia <- terra::vect(filtered_occ, geom = c("x", "y"), crs = "epsg:4326")

# Add probability values based on the raster and filter for biased points
points_biased_sicilia <- coord_occ_sicilia %>%
  cbind(terra::extract(prob_raster_sicilia, ., ID = FALSE)) %>%
  subset(.$layer == 1)

# Generate `occurrences_values_sicilia` with a random sampling (null model) for hypervolume analysis
num_sim <- 3  # Number of simulations for each species
nrow(points_biased_sicilia)
nrow(occurrences_values)
stop <- ceiling(nrow(points_biased_sicilia) + 0.2 * nrow(points_biased_sicilia))  # 20% increase in sample size

# Random subsample of occurrences from the null model (20% increase)
occurrences_values_sicilia <- occurrences_values[sample(nrow(occurrences_values), stop), ]

# ============================
# Plot: Map with Unbiased and Biased Points in Sicily
# ============================

# Generate indices from `occurrences_values_sicilia`
indices <- rownames(occurrences_values_sicilia)
indices <- as.numeric(indices)
filtered_coord_occ_sicilia <- coord_occ_sicilia[indices, ]

# Plot settings
par(mfrow = c(1, 1), mar = c(2, 2, 2, 0.5)) 

# Plot distance-based probability raster for Sicily with unbiased and biased occurrence points
plot(prob_raster_sicilia, col = viridis(500, alpha = 1, begin = 0, end = 1, direction = 1))
points(filtered_coord_occ_sicilia, cex = 0.6)
points(points_biased_sicilia, col = "red", cex = 0.6)

# Add legend with increased inset for the x direction
legend("topright", legend = c("Unbiased", "Biased"), col = c("black", "red"), pch = 19, cex = 0.8,
       xpd = TRUE, y.intersp = 0.8, inset = c(-0.1, 0)) 



## Preliminary Steps for Niche Analysis

# ============================
# Regione Lombardia
# ============================

# Z transform for hypervolume building
for (i in 1:nlayers(mydata_lombardia)){
  mydata_lombardia[[i]] <- (mydata_lombardia[[i]] - cellStats(mydata_lombardia[[i]], 'mean')) / cellStats(mydata_lombardia[[i]], 'sd') 
}

# Transform the raster of occurrences into a dataset and filter rows where Real = 1 and Observed = 1
raster_occurences_lombardia <- presence.points_lombardia$sample.points %>% as.data.frame() %>% .[.$Real == 1 & .$Observed == 1, ]

# Associate environmental variables with occurrences using coordinates
values_occ_lombardia <- mydata_lombardia %>% rasterToPoints() %>% as.data.frame()
filtered_occ_lombardia <- merge(values_occ_lombardia, raster_occurences_lombardia, by = c("x", "y"))

# Remove unnecessary columns
drops <- c("Real", "Observed", "x", "y")
occurrences_values_lombardia <- filtered_occ_lombardia[ , !(names(filtered_occ_lombardia) %in% drops)]

## Functions for Hypervolume

# Hypervolume function for Lombardy
hyp_calc_lombardia <- function(data) {
  hv_occ <- hypervolume_gaussian(data)
  return(hv_occ@Volume)
}

# Function to build accumulation curve with random increment in occurrences for Lombardy
acc_curve_lombardia <- function(x, no) {
  fx <- x %>% 
    sample_n(size = 1) 
  
  ipervolumi <- 0
  num_occurrences <- 0
  
  for (i in 1:1000) {
    fx <- x %>% 
      sample_n(size = no) %>% 
      bind_rows(fx) %>% 
      distinct()
    
    hv <- hyp_calc_lombardia(fx)
    
    ipervolumi <- c(ipervolumi, hv)
    num_occurrences <- c(num_occurrences, nrow(fx))
    
    if(nrow(fx) == nrow(x)) {
      break
    }
  }
  
  result <- bind_cols(iperv = ipervolumi, n_occ = num_occurrences)
  return(list(result))
}

## Roadside bias
# create raster with distances from roads
roads_vect_lombardia <- terra::vect(osm_aoi_roads_lombardia$geometry)  

# turn into SpatRaster object
raster_roads_lombardia <- as(mydata_lombardia[[1]], "SpatRaster")

# rasterize distances
r_lombardia <- terra::rasterize(roads_vect_lombardia, raster_roads_lombardia)

# Calculate the distance in km
d_lombardia <- distance(r_lombardia, unit = "km")

# Crop the d_lombardia raster using the polygon Lombardia.shp
d_rast_lombardia <- crop(d_lombardia, aoi_lombardia)

# Masks the raster to obtain only the data within the polygon Lombardia
d_rast_lombardia <- mask(d_rast_lombardia, aoi_lombardia)

## plot: distance from roads
# Creates a dataframe with raster values and coordinates
raster_df_dist_lombardia <- as.data.frame(d_rast_lombardia, xy = TRUE)

# Name of the column of values to be used for filling
value_column_lombardia <- names(raster_df_dist_lombardia)[3]

#create the plot
library(rlang)
ggplot() +
  # Aggiungi il raster (usando geom_tile)
  geom_tile(data = raster_df_dist_lombardia, aes(x = x, y = y, fill = !!sym(value_column_lombardia))) +
  # Usa la palette viridis per il riempimento del raster
  scale_fill_viridis_c(option = "D", alpha = 1, begin = 0, end = 1) +  # Puoi cambiare "D" con altre opzioni di viridis come "A", "B", "C", ecc.
  # Aggiungi le strade
  geom_sf(data = osm_aoi_roads_lombardia$geometry, color = "black", size = 0.5) +
  theme_bw() +
  theme_minimal() +
  labs(title = "Sampling Probability",
       fill = "Probability (km)") +
  coord_sf() +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  scale_x_continuous(labels = function(x) paste0(round(x, 1), "°E")) +  # Formatta l'asse X
  scale_y_continuous(labels = function(y) paste0(round(y, 1), "°N"))   # Formatta l'asse Y





## Extract distances
# Create raster with distances from roads for Lombardy
roads_vect_lombardia <- terra::vect(osm_aoi_roads_lombardia$geometry)

# Use the first layer of the input raster as the base for rasterization
raster_roads_lombardia <- as(mydata_lombardia[[1]], "SpatRaster")

# Rasterize the roads
r_lombardia <- terra::rasterize(roads_vect_lombardia, raster_roads_lombardia)

# Calculate distance from road raster in km
d_lombardia <- distance(r_lombardia, unit = "km")

# Crop and mask the distance raster using the Lombardia polygon
d_rast_lombardia <- terra::crop(d_lombardia, aoi_lombardia)

# Mask the raster to retain only data within the Lombardia polygon
d_rast_lombardia <- terra::mask(d_rast_lombardia, aoi_lombardia)

# Calculate sampling probability using "lazy sampler" function
c <- 1
sampling_prob_lombardia <- 1 - (log(c * values(d_rast_lombardia)) / log(max(c * values(d_rast_lombardia), na.rm = TRUE)))

# Replace Inf values and values greater than 1
sampling_prob_lombardia[is.infinite(sampling_prob_lombardia)] <- 1
sampling_prob_lombardia[sampling_prob_lombardia > 1] <- 1

# Create probability raster
prob_raster_lombardia <- terra::classify(d_rast_lombardia, cbind(values(d_rast_lombardia), sampling_prob_lombardia))

# Convert to dataframe for plotting
raster_df_prob_lombardia <- terra::as.data.frame(prob_raster_lombardia, xy = TRUE)

# Plot: sampling probability map
ggplot() +
  geom_tile(data = raster_df_prob_lombardia, aes(x = x, y = y, fill = !!sym(names(raster_df_prob_lombardia)[3]))) +
  scale_fill_viridis_c(option = "D", alpha = 1, begin = 0, end = 1) +  
  geom_sf(data = osm_aoi_roads_lombardia$geometry, color = "black", size = 0.5) +
  theme_bw() +
  theme_minimal() +
  labs(title = "Sampling Probability - Lombardia",
       fill = "Probability") +
  coord_sf() +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  ) +
  scale_x_continuous(labels = function(x) paste0(round(x, 1), "°E")) +
  scale_y_continuous(labels = function(y) paste0(round(y, 1), "°N"))

# ============================
# Occurrences as Points in Lombardy
# ============================

# Convert occurrence points in Lombardy into a spatial vector
coord_occ_lombardia <- terra::vect(filtered_occ_lombardia, geom = c("x", "y"), crs = "epsg:4326")

# Add probability values based on the raster and filter for biased points
points_biased_lombardia <- coord_occ_lombardia %>%
  cbind(terra::extract(prob_raster_lombardia, ., ID = FALSE)) %>%
  subset(.$layer == 1)

# Generate `occurrences_values_lombardia` with a random sampling (null model) for hypervolume analysis
stop_lombardia <- ceiling(nrow(points_biased_lombardia) + 0.2 * nrow(points_biased_lombardia))  
occurrences_values_lombardia <- occurrences_values_lombardia[sample(nrow(occurrences_values_lombardia), stop_lombardia), ]

# ============================
# Plot: Map with Unbiased and Biased Points in Lombardy
# ============================

# Generate indices from `occurrences_values_lombardia`
indices_lombardia <- rownames(occurrences_values_lombardia)
indices_lombardia <- as.numeric(indices_lombardia)
filtered_coord_occ_lombardia <- coord_occ_lombardia[indices_lombardia, ]

# Plot distance-based probability raster for Lombardy with unbiased and biased occurrence points
par(mfrow = c(1, 1), mar = c(2, 2, 2, 0.5)) 

plot(prob_raster_lombardia, col = viridis(500, alpha = 1, begin = 0, end = 1, direction = 1))
points(filtered_coord_occ_lombardia, cex = 0.6)
points(points_biased_lombardia, col = "red", cex = 0.6)

# Add legend
legend("topright", legend = c("Unbiased", "Biased"), col = c("black", "red"), pch = 19, cex = 0.8,
       xpd = TRUE, y.intersp = 0.8, inset = c(-0.1, 0)) 
